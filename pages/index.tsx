
import { useMemo, useRef, useCallback, useEffect, useState } from 'react';
import { useRouter } from 'next/router'
import Head from 'next/head';
import Image from 'next/image';
import { useQuery } from "@apollo/client";
import Skeleton from 'react-loading-skeleton'
import classNames from 'classnames';

import styles from '../styles/Home.module.css';
import POKEMONS from '../graphql/query/getPokemons';
import { Pokemon } from '../models/pokemon';
import Types from '../components/pokemonType';
import Filter, { Filters } from '../components/filter';

export default function Home() {
  const router = useRouter()
  const [offset, setOffset] = useState(0);
  const [showFilter, setShowFilter] = useState(false);
  const [filter, setFilter] = useState<Filters>({ generation: [], type: [] })
  const [compareMode, setCompareMode] = useState(false);
  const [isFetchMore, setIsFetchMore] = useState(false);
  const [comparablePokemon, setComparablePokemon] = useState<string[]>([]);

  const { data, loading, fetchMore } = useQuery(POKEMONS, { variables: { offset: 0 } });

  const count = useMemo(() => {
    return data?.aggregate?.aggregate?.count || 0;
  }, [data]);

  const pokemons = useMemo(() => {
    if (!data) return [];
    return data.pokemons.map((el: any) => {
      const pokemon: Pokemon = { id: el?.id, name: el?.name, types: el?.details?.[0]?.types?.map((e: any) => e?.type?.name) };
      return pokemon;
    });
  }, [data]);

  const handleAddComparablePokemon = (name: string) => {
    if (comparablePokemon.length >= 2 && !comparablePokemon.includes(name)) return;
    let newComparable = [...comparablePokemon];
    if (comparablePokemon.includes(name)) {
      const idx = newComparable.findIndex(el => el === name);
      newComparable.splice(idx, 1);
      setComparablePokemon([...newComparable]);
    } else {
      newComparable = [...newComparable, name];
      setComparablePokemon([...newComparable]);
    }
  }

  const handleSubmitComparable = () => {
    router.push(`compare/${comparablePokemon[0]}/${comparablePokemon[1]}`)
  }

  const handleNextFetch = useCallback(() => {
    if (isFetchMore || count < offset + 10) return;
    setIsFetchMore(true);
    fetchMore({
      variables: { offset: offset + 10 },
      updateQuery: (prevResult, { fetchMoreResult }) => {
        if (!fetchMoreResult) return prevResult;
        return {
          ...fetchMoreResult,
          pokemons: [...prevResult.pokemons, ...fetchMoreResult.pokemons],
        }
      }
    }).finally(() => {
      setOffset(off => off + 10);
      setIsFetchMore(false)
    });
  }, [count, offset, fetchMore, isFetchMore])


  const handleObserver = useCallback((entries: any) => {
    const target = entries[0];
    if (target.isIntersecting) {
      handleNextFetch();
    }
  }, [handleNextFetch]);

  useEffect(() => {
    if (loading) return;

    const observe = setTimeout(() => {
      const option = {
        root: null,
        rootMargin: "20px",
        threshold: 0
      };
      const observer = new IntersectionObserver(handleObserver, option);
      if (loader.current) observer.observe(loader.current);
    }, 1000);

    return () => clearTimeout(observe);
  }, [handleObserver, loading]);

  const loader = useRef(null);

  return (
    <div className={styles.container}>
      <Head>
        <title>Pokédex</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <header className={styles.header}>
          <h1 className={styles.title}>
            Pokédex - {count}
          </h1>
          <div className={styles.action}>
            {!compareMode &&
              <button onClick={() => setShowFilter(true)}>
                Filter
              </button>}
            {compareMode &&
              <button disabled={comparablePokemon.length < 2} onClick={() => handleSubmitComparable()}>
                Submit
              </button>}
            <button onClick={() => setCompareMode(prev => !prev)}>
              {!compareMode ? 'Compare' : 'Cancel'}
            </button>
          </div>
        </header>
        <div className={styles.grid}>
          {
            pokemons.map((el: Pokemon) =>
              <a
                key={`list-pokemon-${el?.id}`}
                href={!compareMode ? `/${el.name}` : 'javascript:void(0)'}
                className={classNames(styles.card, { [styles.disableLink]: compareMode })}
              >
                {compareMode &&
                  <span
                    className={classNames(
                      styles.selector, {
                      [styles.disable]: !comparablePokemon.includes(el.name) && comparablePokemon.length > 2,
                      [styles.selected]: comparablePokemon.includes(el.name),
                    })}
                    onClick={() => handleAddComparablePokemon(el.name)}
                  />
                }
                <div className={styles.imageContainer}>
                  <Image
                    alt={`pokemon-${el.id}`}
                    src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${el.id}.png`}
                    width={82}
                    height={82}
                    className={styles.pokemonImage}
                  />
                </div>
                <p>#{el.id}</p>
                <h2>{el.name}</h2>
                <Types pokemonTypes={el?.types} />
              </a>)
          }
        </div>
        {
          showFilter &&
          <Filter
            value={filter}
            handler={(filter: Filters) => setFilter(filter)}
            onClose={() => setShowFilter(false)}
          />
        }
        {(loading || isFetchMore) && <Skeleton count={10} height={800} />}
        <div ref={loader}></div>
      </main>
    </div>
  )
}
