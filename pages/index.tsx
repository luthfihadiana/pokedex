import { useMemo, useRef, useCallback, useEffect, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import { useQuery } from "@apollo/client";
import POKEMONS from '../graphql/query/getPokemons';
import { Pokemon } from '../models/pokemon';

export default function Home() {
  const [offset, setOffset] = useState(0);
  const { data, loading, fetchMore } = useQuery(POKEMONS, { variables: { offset: 0 } });

  const count = useMemo(() => {
    return data?.aggregate?.aggregate?.count || 0;
  }, [data]);

  const pokemons = useMemo(() => {
    if (!data) return [];
    return data.pokemons.map((el: any) => {
      const pokemon: Pokemon = { id: el?.id, name: el?.name, types: el?.detail?.types?.map((e: any) => e?.type?.name) };
      return pokemon;
    });
  }, [data]);

  const handleNextFetch = useCallback(() => {
    if (loading || count < offset + 10) return;
    setOffset(off => off + 10);
    fetchMore({
      variables: { offset: offset + 10 },
      updateQuery: (prevResult, { fetchMoreResult }) => {
        if (!fetchMoreResult) return prevResult;
        return {
          ...fetchMoreResult,
          pokemons: [...prevResult.pokemons, ...fetchMoreResult.pokemons],
        }
      }
    })
  }, [count, loading, offset])


  const handleObserver = useCallback((entries: any) => {
    const target = entries[0];
    if (target.isIntersecting) {
      handleNextFetch();
    }
  }, [handleNextFetch]);

  useEffect(() => {
    if (loading) return;

    const observe = setTimeout(() => {
      const option = {
        root: null,
        rootMargin: "0px",
        threshold: 0
      };
      const observer = new IntersectionObserver(handleObserver, option);
      if (loader.current) observer.observe(loader.current);
    }, 1000);

    return () => clearTimeout(observe);
  }, [handleObserver, loading]);

  const loader = useRef(null);

  return (
    <div className={styles.container}>
      <Head>
        <title>Pokédex</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Pokédex - {count}
        </h1>

        <div className={styles.grid}>
          {
            pokemons.map((el: Pokemon) => <a
              href={`/${el.name}`}
              className={styles.card}
            >
              <div className={styles.imageContainer}>
                <Image
                  alt={`pokemon-${el.id}`}
                  src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${el.id}.png`}
                  width={82}
                  height={82}
                  className={styles.pokemonImage}
                />
              </div>
              <p>#{el.id}</p>
              <h2>{el.name}</h2>
            </a>)
          }
        </div>
        <div ref={loader}></div>
      </main>
    </div>
  )
}
